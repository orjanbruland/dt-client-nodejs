/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_api_annotations_pb = require('../../../google/api/annotations_pb.js');
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.exportSymbol('proto.dt.apigw.v1.CreateLabelRequest', null, global);
goog.exportSymbol('proto.dt.apigw.v1.DeleteLabelRequest', null, global);
goog.exportSymbol('proto.dt.apigw.v1.GetLabelRequest', null, global);
goog.exportSymbol('proto.dt.apigw.v1.Label', null, global);
goog.exportSymbol('proto.dt.apigw.v1.Label.Metadata', null, global);
goog.exportSymbol('proto.dt.apigw.v1.ListLabelsRequest', null, global);
goog.exportSymbol('proto.dt.apigw.v1.ListLabelsResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dt.apigw.v1.ListLabelsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dt.apigw.v1.ListLabelsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dt.apigw.v1.ListLabelsRequest.displayName = 'proto.dt.apigw.v1.ListLabelsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dt.apigw.v1.ListLabelsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.dt.apigw.v1.ListLabelsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dt.apigw.v1.ListLabelsRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.dt.apigw.v1.ListLabelsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    query: msg.getQuery(),
    pageSize: msg.getPageSize(),
    pageToken: msg.getPageToken()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dt.apigw.v1.ListLabelsRequest}
 */
proto.dt.apigw.v1.ListLabelsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dt.apigw.v1.ListLabelsRequest;
  return proto.dt.apigw.v1.ListLabelsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dt.apigw.v1.ListLabelsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dt.apigw.v1.ListLabelsRequest}
 */
proto.dt.apigw.v1.ListLabelsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPageSize(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPageToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.dt.apigw.v1.ListLabelsRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.dt.apigw.v1.ListLabelsRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dt.apigw.v1.ListLabelsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.dt.apigw.v1.ListLabelsRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getQuery();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getPageSize();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = this.getPageToken();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.dt.apigw.v1.ListLabelsRequest} The clone.
 */
proto.dt.apigw.v1.ListLabelsRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.dt.apigw.v1.ListLabelsRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string query = 1;
 * @return {string}
 */
proto.dt.apigw.v1.ListLabelsRequest.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.dt.apigw.v1.ListLabelsRequest.prototype.setQuery = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 page_size = 2;
 * @return {number}
 */
proto.dt.apigw.v1.ListLabelsRequest.prototype.getPageSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.dt.apigw.v1.ListLabelsRequest.prototype.setPageSize = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string page_token = 3;
 * @return {string}
 */
proto.dt.apigw.v1.ListLabelsRequest.prototype.getPageToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.dt.apigw.v1.ListLabelsRequest.prototype.setPageToken = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dt.apigw.v1.ListLabelsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dt.apigw.v1.ListLabelsResponse.repeatedFields_, null);
};
goog.inherits(proto.dt.apigw.v1.ListLabelsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dt.apigw.v1.ListLabelsResponse.displayName = 'proto.dt.apigw.v1.ListLabelsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dt.apigw.v1.ListLabelsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dt.apigw.v1.ListLabelsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.dt.apigw.v1.ListLabelsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dt.apigw.v1.ListLabelsResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.dt.apigw.v1.ListLabelsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    labelsList: jspb.Message.toObjectList(msg.getLabelsList(),
    proto.dt.apigw.v1.Label.toObject, includeInstance),
    nextPageToken: msg.getNextPageToken()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dt.apigw.v1.ListLabelsResponse}
 */
proto.dt.apigw.v1.ListLabelsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dt.apigw.v1.ListLabelsResponse;
  return proto.dt.apigw.v1.ListLabelsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dt.apigw.v1.ListLabelsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dt.apigw.v1.ListLabelsResponse}
 */
proto.dt.apigw.v1.ListLabelsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.dt.apigw.v1.Label;
      reader.readMessage(value,proto.dt.apigw.v1.Label.deserializeBinaryFromReader);
      msg.getLabelsList().push(value);
      msg.setLabelsList(msg.getLabelsList());
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNextPageToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.dt.apigw.v1.ListLabelsResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.dt.apigw.v1.ListLabelsResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dt.apigw.v1.ListLabelsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.dt.apigw.v1.ListLabelsResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getLabelsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.dt.apigw.v1.Label.serializeBinaryToWriter
    );
  }
  f = this.getNextPageToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.dt.apigw.v1.ListLabelsResponse} The clone.
 */
proto.dt.apigw.v1.ListLabelsResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.dt.apigw.v1.ListLabelsResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated Label labels = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.dt.apigw.v1.Label>}
 */
proto.dt.apigw.v1.ListLabelsResponse.prototype.getLabelsList = function() {
  return /** @type{!Array.<!proto.dt.apigw.v1.Label>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.dt.apigw.v1.Label, 1));
};


/** @param {Array.<!proto.dt.apigw.v1.Label>} value  */
proto.dt.apigw.v1.ListLabelsResponse.prototype.setLabelsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.dt.apigw.v1.ListLabelsResponse.prototype.clearLabelsList = function() {
  this.setLabelsList([]);
};


/**
 * optional string next_page_token = 2;
 * @return {string}
 */
proto.dt.apigw.v1.ListLabelsResponse.prototype.getNextPageToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.dt.apigw.v1.ListLabelsResponse.prototype.setNextPageToken = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dt.apigw.v1.CreateLabelRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dt.apigw.v1.CreateLabelRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dt.apigw.v1.CreateLabelRequest.displayName = 'proto.dt.apigw.v1.CreateLabelRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dt.apigw.v1.CreateLabelRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.dt.apigw.v1.CreateLabelRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dt.apigw.v1.CreateLabelRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.dt.apigw.v1.CreateLabelRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: msg.getName()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dt.apigw.v1.CreateLabelRequest}
 */
proto.dt.apigw.v1.CreateLabelRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dt.apigw.v1.CreateLabelRequest;
  return proto.dt.apigw.v1.CreateLabelRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dt.apigw.v1.CreateLabelRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dt.apigw.v1.CreateLabelRequest}
 */
proto.dt.apigw.v1.CreateLabelRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.dt.apigw.v1.CreateLabelRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.dt.apigw.v1.CreateLabelRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dt.apigw.v1.CreateLabelRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.dt.apigw.v1.CreateLabelRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.dt.apigw.v1.CreateLabelRequest} The clone.
 */
proto.dt.apigw.v1.CreateLabelRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.dt.apigw.v1.CreateLabelRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.dt.apigw.v1.CreateLabelRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.dt.apigw.v1.CreateLabelRequest.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dt.apigw.v1.GetLabelRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dt.apigw.v1.GetLabelRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dt.apigw.v1.GetLabelRequest.displayName = 'proto.dt.apigw.v1.GetLabelRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dt.apigw.v1.GetLabelRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.dt.apigw.v1.GetLabelRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dt.apigw.v1.GetLabelRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.dt.apigw.v1.GetLabelRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    labelId: msg.getLabelId()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dt.apigw.v1.GetLabelRequest}
 */
proto.dt.apigw.v1.GetLabelRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dt.apigw.v1.GetLabelRequest;
  return proto.dt.apigw.v1.GetLabelRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dt.apigw.v1.GetLabelRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dt.apigw.v1.GetLabelRequest}
 */
proto.dt.apigw.v1.GetLabelRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabelId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.dt.apigw.v1.GetLabelRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.dt.apigw.v1.GetLabelRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dt.apigw.v1.GetLabelRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.dt.apigw.v1.GetLabelRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getLabelId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.dt.apigw.v1.GetLabelRequest} The clone.
 */
proto.dt.apigw.v1.GetLabelRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.dt.apigw.v1.GetLabelRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string label_id = 1;
 * @return {string}
 */
proto.dt.apigw.v1.GetLabelRequest.prototype.getLabelId = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.dt.apigw.v1.GetLabelRequest.prototype.setLabelId = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dt.apigw.v1.DeleteLabelRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dt.apigw.v1.DeleteLabelRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dt.apigw.v1.DeleteLabelRequest.displayName = 'proto.dt.apigw.v1.DeleteLabelRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dt.apigw.v1.DeleteLabelRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.dt.apigw.v1.DeleteLabelRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dt.apigw.v1.DeleteLabelRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.dt.apigw.v1.DeleteLabelRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    labelId: msg.getLabelId()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dt.apigw.v1.DeleteLabelRequest}
 */
proto.dt.apigw.v1.DeleteLabelRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dt.apigw.v1.DeleteLabelRequest;
  return proto.dt.apigw.v1.DeleteLabelRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dt.apigw.v1.DeleteLabelRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dt.apigw.v1.DeleteLabelRequest}
 */
proto.dt.apigw.v1.DeleteLabelRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabelId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.dt.apigw.v1.DeleteLabelRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.dt.apigw.v1.DeleteLabelRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dt.apigw.v1.DeleteLabelRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.dt.apigw.v1.DeleteLabelRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getLabelId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.dt.apigw.v1.DeleteLabelRequest} The clone.
 */
proto.dt.apigw.v1.DeleteLabelRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.dt.apigw.v1.DeleteLabelRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string label_id = 1;
 * @return {string}
 */
proto.dt.apigw.v1.DeleteLabelRequest.prototype.getLabelId = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.dt.apigw.v1.DeleteLabelRequest.prototype.setLabelId = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dt.apigw.v1.Label = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dt.apigw.v1.Label, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dt.apigw.v1.Label.displayName = 'proto.dt.apigw.v1.Label';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dt.apigw.v1.Label.prototype.toObject = function(opt_includeInstance) {
  return proto.dt.apigw.v1.Label.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dt.apigw.v1.Label} msg The msg instance to transform.
 * @return {!Object}
 */
proto.dt.apigw.v1.Label.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId(),
    name: msg.getName(),
    metadata: (f = msg.getMetadata()) && proto.dt.apigw.v1.Label.Metadata.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dt.apigw.v1.Label}
 */
proto.dt.apigw.v1.Label.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dt.apigw.v1.Label;
  return proto.dt.apigw.v1.Label.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dt.apigw.v1.Label} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dt.apigw.v1.Label}
 */
proto.dt.apigw.v1.Label.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new proto.dt.apigw.v1.Label.Metadata;
      reader.readMessage(value,proto.dt.apigw.v1.Label.Metadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.dt.apigw.v1.Label} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.dt.apigw.v1.Label.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dt.apigw.v1.Label.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.dt.apigw.v1.Label.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getMetadata();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.dt.apigw.v1.Label.Metadata.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.dt.apigw.v1.Label} The clone.
 */
proto.dt.apigw.v1.Label.prototype.cloneMessage = function() {
  return /** @type {!proto.dt.apigw.v1.Label} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.dt.apigw.v1.Label.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.dt.apigw.v1.Label.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.dt.apigw.v1.Label.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.dt.apigw.v1.Label.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional Metadata metadata = 3;
 * @return {proto.dt.apigw.v1.Label.Metadata}
 */
proto.dt.apigw.v1.Label.prototype.getMetadata = function() {
  return /** @type{proto.dt.apigw.v1.Label.Metadata} */ (
    jspb.Message.getWrapperField(this, proto.dt.apigw.v1.Label.Metadata, 3));
};


/** @param {proto.dt.apigw.v1.Label.Metadata|undefined} value  */
proto.dt.apigw.v1.Label.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.dt.apigw.v1.Label.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.dt.apigw.v1.Label.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dt.apigw.v1.Label.Metadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dt.apigw.v1.Label.Metadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dt.apigw.v1.Label.Metadata.displayName = 'proto.dt.apigw.v1.Label.Metadata';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dt.apigw.v1.Label.Metadata.prototype.toObject = function(opt_includeInstance) {
  return proto.dt.apigw.v1.Label.Metadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dt.apigw.v1.Label.Metadata} msg The msg instance to transform.
 * @return {!Object}
 */
proto.dt.apigw.v1.Label.Metadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    thingsCount: msg.getThingsCount()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dt.apigw.v1.Label.Metadata}
 */
proto.dt.apigw.v1.Label.Metadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dt.apigw.v1.Label.Metadata;
  return proto.dt.apigw.v1.Label.Metadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dt.apigw.v1.Label.Metadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dt.apigw.v1.Label.Metadata}
 */
proto.dt.apigw.v1.Label.Metadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setThingsCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.dt.apigw.v1.Label.Metadata} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.dt.apigw.v1.Label.Metadata.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dt.apigw.v1.Label.Metadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.dt.apigw.v1.Label.Metadata.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getThingsCount();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.dt.apigw.v1.Label.Metadata} The clone.
 */
proto.dt.apigw.v1.Label.Metadata.prototype.cloneMessage = function() {
  return /** @type {!proto.dt.apigw.v1.Label.Metadata} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int32 things_count = 1;
 * @return {number}
 */
proto.dt.apigw.v1.Label.Metadata.prototype.getThingsCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.dt.apigw.v1.Label.Metadata.prototype.setThingsCount = function(value) {
  jspb.Message.setField(this, 1, value);
};


goog.object.extend(exports, proto.dt.apigw.v1);
