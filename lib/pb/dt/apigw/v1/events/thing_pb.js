/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.exportSymbol('proto.dt.apigw.v1.events.ThingDescriptionChangeEvent', null, global);
goog.exportSymbol('proto.dt.apigw.v1.events.ThingLocationChangeEvent', null, global);
goog.exportSymbol('proto.dt.apigw.v1.events.ThingNameChangeEvent', null, global);
goog.exportSymbol('proto.dt.apigw.v1.events.ThingStateChangeEvent', null, global);
goog.exportSymbol('proto.dt.apigw.v1.events.ThingTypeChangeEvent', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dt.apigw.v1.events.ThingStateChangeEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dt.apigw.v1.events.ThingStateChangeEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dt.apigw.v1.events.ThingStateChangeEvent.displayName = 'proto.dt.apigw.v1.events.ThingStateChangeEvent';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dt.apigw.v1.events.ThingStateChangeEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.dt.apigw.v1.events.ThingStateChangeEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dt.apigw.v1.events.ThingStateChangeEvent} msg The msg instance to transform.
 * @return {!Object}
 */
proto.dt.apigw.v1.events.ThingStateChangeEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    temperature: msg.getTemperature(),
    objectPresent: msg.getObjectPresent(),
    touch: msg.getTouch(),
    lastPressed: (f = msg.getLastPressed()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    rssi: msg.getRssi(),
    rssiStrength: msg.getRssiStrength(),
    batteryVoltage: msg.getBatteryVoltage(),
    batteryPercentage: msg.getBatteryPercentage(),
    connectorId: msg.getConnectorId()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dt.apigw.v1.events.ThingStateChangeEvent}
 */
proto.dt.apigw.v1.events.ThingStateChangeEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dt.apigw.v1.events.ThingStateChangeEvent;
  return proto.dt.apigw.v1.events.ThingStateChangeEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dt.apigw.v1.events.ThingStateChangeEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dt.apigw.v1.events.ThingStateChangeEvent}
 */
proto.dt.apigw.v1.events.ThingStateChangeEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTemperature(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setObjectPresent(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTouch(value);
      break;
    case 5:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setLastPressed(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setRssi(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRssiStrength(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBatteryVoltage(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBatteryPercentage(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setConnectorId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.dt.apigw.v1.events.ThingStateChangeEvent} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.dt.apigw.v1.events.ThingStateChangeEvent.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dt.apigw.v1.events.ThingStateChangeEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.dt.apigw.v1.events.ThingStateChangeEvent.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTemperature();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = this.getObjectPresent();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = this.getTouch();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = this.getLastPressed();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = this.getRssi();
  if (f !== 0) {
    writer.writeSint32(
      6,
      f
    );
  }
  f = this.getRssiStrength();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = this.getBatteryVoltage();
  if (f !== 0.0) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = this.getBatteryPercentage();
  if (f !== 0.0) {
    writer.writeFloat(
      9,
      f
    );
  }
  f = this.getConnectorId();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.dt.apigw.v1.events.ThingStateChangeEvent} The clone.
 */
proto.dt.apigw.v1.events.ThingStateChangeEvent.prototype.cloneMessage = function() {
  return /** @type {!proto.dt.apigw.v1.events.ThingStateChangeEvent} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional float temperature = 1;
 * @return {number}
 */
proto.dt.apigw.v1.events.ThingStateChangeEvent.prototype.getTemperature = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.dt.apigw.v1.events.ThingStateChangeEvent.prototype.setTemperature = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bool object_present = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.dt.apigw.v1.events.ThingStateChangeEvent.prototype.getObjectPresent = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 2, false));
};


/** @param {boolean} value  */
proto.dt.apigw.v1.events.ThingStateChangeEvent.prototype.setObjectPresent = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bool touch = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.dt.apigw.v1.events.ThingStateChangeEvent.prototype.getTouch = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 3, false));
};


/** @param {boolean} value  */
proto.dt.apigw.v1.events.ThingStateChangeEvent.prototype.setTouch = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional google.protobuf.Timestamp last_pressed = 5;
 * @return {proto.google.protobuf.Timestamp}
 */
proto.dt.apigw.v1.events.ThingStateChangeEvent.prototype.getLastPressed = function() {
  return /** @type{proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 5));
};


/** @param {proto.google.protobuf.Timestamp|undefined} value  */
proto.dt.apigw.v1.events.ThingStateChangeEvent.prototype.setLastPressed = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.dt.apigw.v1.events.ThingStateChangeEvent.prototype.clearLastPressed = function() {
  this.setLastPressed(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.dt.apigw.v1.events.ThingStateChangeEvent.prototype.hasLastPressed = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional sint32 rssi = 6;
 * @return {number}
 */
proto.dt.apigw.v1.events.ThingStateChangeEvent.prototype.getRssi = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 6, 0));
};


/** @param {number} value  */
proto.dt.apigw.v1.events.ThingStateChangeEvent.prototype.setRssi = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional int32 rssi_strength = 7;
 * @return {number}
 */
proto.dt.apigw.v1.events.ThingStateChangeEvent.prototype.getRssiStrength = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 7, 0));
};


/** @param {number} value  */
proto.dt.apigw.v1.events.ThingStateChangeEvent.prototype.setRssiStrength = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional float battery_voltage = 8;
 * @return {number}
 */
proto.dt.apigw.v1.events.ThingStateChangeEvent.prototype.getBatteryVoltage = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 8, 0));
};


/** @param {number} value  */
proto.dt.apigw.v1.events.ThingStateChangeEvent.prototype.setBatteryVoltage = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional float battery_percentage = 9;
 * @return {number}
 */
proto.dt.apigw.v1.events.ThingStateChangeEvent.prototype.getBatteryPercentage = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 9, 0));
};


/** @param {number} value  */
proto.dt.apigw.v1.events.ThingStateChangeEvent.prototype.setBatteryPercentage = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional string connector_id = 10;
 * @return {string}
 */
proto.dt.apigw.v1.events.ThingStateChangeEvent.prototype.getConnectorId = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 10, ""));
};


/** @param {string} value  */
proto.dt.apigw.v1.events.ThingStateChangeEvent.prototype.setConnectorId = function(value) {
  jspb.Message.setField(this, 10, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dt.apigw.v1.events.ThingTypeChangeEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dt.apigw.v1.events.ThingTypeChangeEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dt.apigw.v1.events.ThingTypeChangeEvent.displayName = 'proto.dt.apigw.v1.events.ThingTypeChangeEvent';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dt.apigw.v1.events.ThingTypeChangeEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.dt.apigw.v1.events.ThingTypeChangeEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dt.apigw.v1.events.ThingTypeChangeEvent} msg The msg instance to transform.
 * @return {!Object}
 */
proto.dt.apigw.v1.events.ThingTypeChangeEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    thingTypeId: msg.getThingTypeId()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dt.apigw.v1.events.ThingTypeChangeEvent}
 */
proto.dt.apigw.v1.events.ThingTypeChangeEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dt.apigw.v1.events.ThingTypeChangeEvent;
  return proto.dt.apigw.v1.events.ThingTypeChangeEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dt.apigw.v1.events.ThingTypeChangeEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dt.apigw.v1.events.ThingTypeChangeEvent}
 */
proto.dt.apigw.v1.events.ThingTypeChangeEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setThingTypeId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.dt.apigw.v1.events.ThingTypeChangeEvent} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.dt.apigw.v1.events.ThingTypeChangeEvent.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dt.apigw.v1.events.ThingTypeChangeEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.dt.apigw.v1.events.ThingTypeChangeEvent.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getThingTypeId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.dt.apigw.v1.events.ThingTypeChangeEvent} The clone.
 */
proto.dt.apigw.v1.events.ThingTypeChangeEvent.prototype.cloneMessage = function() {
  return /** @type {!proto.dt.apigw.v1.events.ThingTypeChangeEvent} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string thing_type_id = 1;
 * @return {string}
 */
proto.dt.apigw.v1.events.ThingTypeChangeEvent.prototype.getThingTypeId = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.dt.apigw.v1.events.ThingTypeChangeEvent.prototype.setThingTypeId = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dt.apigw.v1.events.ThingNameChangeEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dt.apigw.v1.events.ThingNameChangeEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dt.apigw.v1.events.ThingNameChangeEvent.displayName = 'proto.dt.apigw.v1.events.ThingNameChangeEvent';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dt.apigw.v1.events.ThingNameChangeEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.dt.apigw.v1.events.ThingNameChangeEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dt.apigw.v1.events.ThingNameChangeEvent} msg The msg instance to transform.
 * @return {!Object}
 */
proto.dt.apigw.v1.events.ThingNameChangeEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: msg.getName()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dt.apigw.v1.events.ThingNameChangeEvent}
 */
proto.dt.apigw.v1.events.ThingNameChangeEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dt.apigw.v1.events.ThingNameChangeEvent;
  return proto.dt.apigw.v1.events.ThingNameChangeEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dt.apigw.v1.events.ThingNameChangeEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dt.apigw.v1.events.ThingNameChangeEvent}
 */
proto.dt.apigw.v1.events.ThingNameChangeEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.dt.apigw.v1.events.ThingNameChangeEvent} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.dt.apigw.v1.events.ThingNameChangeEvent.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dt.apigw.v1.events.ThingNameChangeEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.dt.apigw.v1.events.ThingNameChangeEvent.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.dt.apigw.v1.events.ThingNameChangeEvent} The clone.
 */
proto.dt.apigw.v1.events.ThingNameChangeEvent.prototype.cloneMessage = function() {
  return /** @type {!proto.dt.apigw.v1.events.ThingNameChangeEvent} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.dt.apigw.v1.events.ThingNameChangeEvent.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.dt.apigw.v1.events.ThingNameChangeEvent.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dt.apigw.v1.events.ThingDescriptionChangeEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dt.apigw.v1.events.ThingDescriptionChangeEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dt.apigw.v1.events.ThingDescriptionChangeEvent.displayName = 'proto.dt.apigw.v1.events.ThingDescriptionChangeEvent';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dt.apigw.v1.events.ThingDescriptionChangeEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.dt.apigw.v1.events.ThingDescriptionChangeEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dt.apigw.v1.events.ThingDescriptionChangeEvent} msg The msg instance to transform.
 * @return {!Object}
 */
proto.dt.apigw.v1.events.ThingDescriptionChangeEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    description: msg.getDescription()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dt.apigw.v1.events.ThingDescriptionChangeEvent}
 */
proto.dt.apigw.v1.events.ThingDescriptionChangeEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dt.apigw.v1.events.ThingDescriptionChangeEvent;
  return proto.dt.apigw.v1.events.ThingDescriptionChangeEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dt.apigw.v1.events.ThingDescriptionChangeEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dt.apigw.v1.events.ThingDescriptionChangeEvent}
 */
proto.dt.apigw.v1.events.ThingDescriptionChangeEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.dt.apigw.v1.events.ThingDescriptionChangeEvent} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.dt.apigw.v1.events.ThingDescriptionChangeEvent.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dt.apigw.v1.events.ThingDescriptionChangeEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.dt.apigw.v1.events.ThingDescriptionChangeEvent.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getDescription();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.dt.apigw.v1.events.ThingDescriptionChangeEvent} The clone.
 */
proto.dt.apigw.v1.events.ThingDescriptionChangeEvent.prototype.cloneMessage = function() {
  return /** @type {!proto.dt.apigw.v1.events.ThingDescriptionChangeEvent} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string description = 1;
 * @return {string}
 */
proto.dt.apigw.v1.events.ThingDescriptionChangeEvent.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.dt.apigw.v1.events.ThingDescriptionChangeEvent.prototype.setDescription = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dt.apigw.v1.events.ThingLocationChangeEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dt.apigw.v1.events.ThingLocationChangeEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.dt.apigw.v1.events.ThingLocationChangeEvent.displayName = 'proto.dt.apigw.v1.events.ThingLocationChangeEvent';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dt.apigw.v1.events.ThingLocationChangeEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.dt.apigw.v1.events.ThingLocationChangeEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dt.apigw.v1.events.ThingLocationChangeEvent} msg The msg instance to transform.
 * @return {!Object}
 */
proto.dt.apigw.v1.events.ThingLocationChangeEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    latitude: msg.getLatitude(),
    longitude: msg.getLongitude()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dt.apigw.v1.events.ThingLocationChangeEvent}
 */
proto.dt.apigw.v1.events.ThingLocationChangeEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dt.apigw.v1.events.ThingLocationChangeEvent;
  return proto.dt.apigw.v1.events.ThingLocationChangeEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dt.apigw.v1.events.ThingLocationChangeEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dt.apigw.v1.events.ThingLocationChangeEvent}
 */
proto.dt.apigw.v1.events.ThingLocationChangeEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLatitude(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLongitude(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.dt.apigw.v1.events.ThingLocationChangeEvent} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.dt.apigw.v1.events.ThingLocationChangeEvent.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dt.apigw.v1.events.ThingLocationChangeEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.dt.apigw.v1.events.ThingLocationChangeEvent.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getLatitude();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = this.getLongitude();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.dt.apigw.v1.events.ThingLocationChangeEvent} The clone.
 */
proto.dt.apigw.v1.events.ThingLocationChangeEvent.prototype.cloneMessage = function() {
  return /** @type {!proto.dt.apigw.v1.events.ThingLocationChangeEvent} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional double latitude = 1;
 * @return {number}
 */
proto.dt.apigw.v1.events.ThingLocationChangeEvent.prototype.getLatitude = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.dt.apigw.v1.events.ThingLocationChangeEvent.prototype.setLatitude = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional double longitude = 2;
 * @return {number}
 */
proto.dt.apigw.v1.events.ThingLocationChangeEvent.prototype.getLongitude = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.dt.apigw.v1.events.ThingLocationChangeEvent.prototype.setLongitude = function(value) {
  jspb.Message.setField(this, 2, value);
};


goog.object.extend(exports, proto.dt.apigw.v1.events);
