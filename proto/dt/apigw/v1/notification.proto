syntax = "proto3";

package dt.apigw.v1;

option go_package = "bitbucket.org/disruptive-technologies/cloud-apis/dt/apigw/v1";
option java_multiple_files = true;
option java_outer_classname = "NotificationProto";
option java_package = "com.dt.apigw.v1";
option objc_class_prefix = "DTD";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

service NotificationService {
  rpc ListNotifications(ListNotificationsRequest) returns (ListNotificationsResponse) {
    option (google.api.http) = { get: "/v1/notifications" };
  }

  rpc GetNotification(GetNotificationRequest) returns (Notification) {
    option (google.api.http) = { get: "/v1/notifications/{notification_id}" };
  }

  rpc DismissNotification(DismissNotificationRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = { post: "/v1/notifications/{notification_id}/dismiss" body: "*" };
  }
}

/// Request message for `ListNotifications`.
message ListNotificationsRequest {
  /// Filter the result only to the related object id.
  string object_id = 1;
  /// Filter the result only to the following severity level.
  NotificationSeverityLevel level = 2;
  /// Filter the result only to the following status.
  NotificationStatus status = 3;

  /// Requested page size. Maximum page size is 100; which is also the default.
  int32 page_size = 4;

  /// A token identifying a page of results to return.
  /// Should be a `next_page_token` value returned from a previous call to
  /// `ListNotifications`. If not specified, the first page of result is returned.
  string page_token = 5;

  /// If we should return expired notifications as well?
  bool ignore_ttl = 6;
}

/// Response message for `ListNotifications`.
message ListNotificationsResponse {
  /// A list of `Notification` objects
  repeated Notification notifications = 1;

  /// A token to use for retriving the next page of results.
  /// Next result can be fetched using this value inside `page_token` for the
  /// next call to `ListNotifications`. If the field is empty there are no results
  /// to retrive.
  string next_page_token = 2;
}

/// Request message for `GetNotification`.
message GetNotificationRequest {
  /// The unqiue ID of the Notification.
  string notification_id = 1;
}

/// Request message for `DismissNotification`.
message DismissNotificationRequest {
  /// The unqiue ID of the Notification.
  string notification_id = 1;
}

/// NotificationSeverityLevel provides the different levels of
/// severity for the Notification.
enum NotificationSeverityLevel {
  INFO = 0;
  WARNING = 1;
  ALERT = 2;
}

/// NotificationStatus provides the status choices of the Notification.
enum NotificationStatus {
  /// Only used as default in ListNotifications(). Means that any status is
  /// allowed.
  ANY = 0;
  /// The Notification remains active as long as the TTL has not expired.
  ACTIVE = 1;
  /// The Notification has been automatically cleared by the system.
  /// I.e the `Rule` who created it, no longer applies.
  CLEARED = 2;
  /// The Notification has been manually dismissed by an `User`.
  DISMISSED = 3;
}

/// An Notification represents a status message connected to another object.
/// Objects could be Thing, User etc.
message Notification {
  /// The unique ID of the Notification.
  string id = 1;
  /// The unique ID of the object the notification is attached to.
  string object_id = 2;
  /// The subject of the Notification.
  string subject = 3;
  /// The message of the Notification.
  string message = 4;
  /// The level of severity of the Notification.
  NotificationSeverityLevel level = 5;
  /// The current status of the Notification.
  NotificationStatus status = 6;
  /// The date of creation
  google.protobuf.Timestamp created = 7;
  /// The time-to-live for the Notification.
  google.protobuf.Duration ttl = 8;
}
